#include <FastLED.h>
// Code that will start up each LED one by one turning it magenta before slowly changing to a white and then back to magenta in a loop while there is a breathing effect (decreasing and increasing the brightness of the LEDS in a funciton)

//Neofade.h CODE
// I was having trouble getting arduino to recognize my header file so that is why this block of text is here
// NeoFade class by Marco C and most of this code. I just changed a few things on timing and making the color hold for a period of time before reversing the cycle and repeating. 
// please check out his work https://arduinoplusplus.wordpress.com/2020/06/11/neopixel-fades-and-color-transitions/


// The Start of Marco C's code 
class NeoFade
{
public:
  void begin(void) 
  { 
    _period = 1000;
    reset(); 
    _ended = true;
  }
 
  inline void reset(void) 
  {
    setFade(_rStart, _gStart, _bStart, _rEnd, _gEnd, _bEnd);
  }
 
  inline bool isEnded(void) { return(_ended); }
   
  inline void setPeriod(uint16_t p) { _period = p; calcTimeInterval(); }
 
  void setFade(uint16_t r0, uint16_t g0, uint16_t b0, uint16_t r1, uint16_t g1, uint16_t b1)
    {
      _rStart = _r0 = r0;  _rEnd = _r1 = r1;
      _gStart = _g0 = g0;  _gEnd = _g1 = g1;
      _bStart = _b0 = b0;  _bEnd = _b1 = b1;
 
      _dR = uiabs(_r1,_r0);  _sR = _r0 < _r1 ? 1 : -1;
      _dG = uiabs(_g1,_g0);  _sG = _g0 < _g1 ? 1 : -1;
      _dB = uiabs(_b1,_b0);  _sB = _b0 < _b1 ? 1 : -1;
      _dMax = max3(_dR, _dG, _dB);
      _steps = _dMax;
      calcTimeInterval();
      _timeStart = 0;
 
      _r1 = _g1 = _b1 = _dMax/2;            // error offset
 
      _ended = false;
    }
 
  bool getNext(uint16_t &r, uint16_t &g, uint16_t&b)
  {
    if (millis() - _timeStart < _timeInterval)
      return(false);
 
    _timeStart = millis();
 
    r = _r0;
    g = _g0;
    b = _b0;
 
    _ended = (_steps == 0);
    if (!_ended)
    {
      _steps--;
      _r1 -= _dR; if (_r1 < 0) { _r1 += _dMax; _r0 += _sR; }
      _g1 -= _dG; if (_g1 < 0) { _g1 += _dMax; _g0 += _sG; }
      _b1 -= _dB; if (_b1 < 0) { _b1 += _dMax; _b0 += _sB; }
    }
 
    return(true);
  }
 
private:
  uint16_t _rStart, _gStart, _bStart, _rEnd, _gEnd, _bEnd;
  int32_t _r0, _g0, _b0, _r1, _g1, _b1, _steps;
  int16_t _dR, _dG, _dB, _dMax;
  int8_t _sR, _sG, _sB;
  bool _ended;
 
  // timing parameters
  uint16_t _period;    // fade duration in ms
  uint32_t _timeStart; // animation time start
  uint32_t _timeInterval; // interval between color changes
   
  void calcTimeInterval(void)
  {
    _timeInterval = _period / _steps;
    if (_timeInterval == 0) _timeInterval = 1;
  }
 
  uint16_t max3(uint16_t x, uint16_t y, uint16_t z)
  {
    uint16_t m = z;    // assume z to start with
     
    if (x > y) { if (x > z) m = x; }
    else { if (y > z) m = y; }
     
    return(m);
  }
 
  inline uint16_t uiabs(uint16_t a, uint16_t b) { return((a > b) ? (a - b) : (b - a)); }
 
};
////////////////////////////////////////////
//FILE WOULD NORMALLY START HERE//
///////////////////////////////////////////
 // This is where my changes start (Marco C was still a heavy influence for this) PLEASE read every line so you know what you need to change.
#define NUM_LEDS 100 // Number of LEDs in the strip
#define DATA_PIN 4 // WS2812 DATA_PIN. Look on your board to where the data cable from the LED strip is connected. That is the pin number. 
#define Data_PIN 5
#define APIXELS   400 // Number of LEDs for turn on sequence 
 
CRGB leds[NUM_LEDS]; // the array of leds

NeoFade F;
int delayval = 50; // 10 = 1/2 second delay. The higher the number the slower the delay for the turn on sequence only 

 
void setup(void)
{
  F.begin(); // This initializes the FastLed Library
  F.setPeriod(5000);
  FastLED.addLeds<WS2812, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(255); // Max 255 Min 0 (LED is off)

////// Turn on Sequence ///////
  for(int k=0;k<APIXELS;k++){
    leds[k].r = 255; // Red value for your color 
    leds[k].g = 0; //Green value for your color
    leds[k].b = 120; //blue value for your color 
    FastLED.show(); // This sends the updated pixel color to the hardware.
    delay(delayval); // Delay for a period of time (in milliseconds). We defined this variable above! 
  }
}


int lastFade = 0; 

void loop(void)
{
  uint8_t bright = beatsin8( 50 /*BPM*/, 100 /*dimmest*/, 255 /*brightest*/ ); // Function to make the LEDs breathe using math. 
FastLED.setBrightness( bright );

// Start of the Color Changing code 
  uint16_t r, g, b;
 
  if (F.isEnded()){
    if(lastFade==0){
      F.setFade(255, 0, 120, 255, 255, 255); // (R,G,B,R,G,B) This example goes from Magenta (255,0,120) to white (255,255,255) so change the numbers to what you want
      lastFade=1;
    }
    else{
      F.setFade(255, 255, 255, 255, 0, 120); // The same as the line above except swap the order so it fades back to the original color. 
      lastFade=0;
    }
  }
  if (F.getNext(r, g, b))
  {
    for(int i = 0; i < NUM_LEDS; i++){ // The actual fade loop using the header logic from above 
      leds[i] = CRGB(r, g, b);
    }
    FastLED.show(); // DO NOT REMOVE THIS
  }

 
  }

 
 
